service:
  name: data-export-scheduler

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline

# serverless offline config
custom:
  config: ${file(config.json)}
  app-name: ${self:custom.config.appName}
  serverless-offline:
      port: 4000
      babelOptions:
        presets: ["es2015"]
  dynamodb:
    stages:
      - ${self:custom.config.stage}
    start:
      migrate: true
  s3Buckets:
    BUCKET_NAME: ${self:custom.app-name}-${self:service}-${self:custom.config.stage}-exports-bucket
    
provider:
  name: aws
  runtime: nodejs10.x
  region: ${self:custom.config.region}
  environment:
    REGION: ${self:custom.config.region}
    STAGE: ${self:custom.config.stage}
    APP_NAME: ${self:custom.config.appName}
    DOWNLOADS_TABLE: ${self:custom.app-name}-${self:service}-${self:custom.config.stage}-files
    BATCH_UPLOAD_TABLE: ${self:custom.app-name}-${self:service}-${self:custom.config.stage}-upload
    EXPORT_REQUEST_TABLE: ${self:custom.app-name}-${self:service}-${self:custom.config.stage}-export-requests
    EMAIL_RECEIVERS: ${self:custom.config.emailReceivers}
    EMAIL_SENDER: ${self:custom.config.emailSender}
    SEGMENT_EXCLUDED_TOPICS: ${self:custom.config.segmentExcludedTopics}
    AMPLITUDE_EXCLUDED_TOPICS: ${self:custom.config.amplitudeExcludedTopics}
    MIXPANEL_EXCLUDED_TOPICS: ${self:custom.config.mixpanelExcludedTopics}
    EXPORT_SERVICES: ${self:custom.config.services}
    TEMPLATES_BUCKET: ${self:custom.config.templatesBucket}
    INCLUDE_ORGANIC: ${self:custom.config.includeOrganic}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - lambda:InvokeFunction
        - ses:SendEmail
        - secretsmanager:GetSecretValue
        - s3:*
      Resource: 
        - "arn:aws:dynamodb:${self:custom.config.region}:*:table/${self:provider.environment.DOWNLOADS_TABLE}"
        - "arn:aws:dynamodb:${self:custom.config.region}:*:table/${self:provider.environment.DOWNLOADS_TABLE}/index/*"
        - "arn:aws:dynamodb:${self:custom.config.region}:*:table/${self:provider.environment.BATCH_UPLOAD_TABLE}"
        - "arn:aws:dynamodb:${self:custom.config.region}:*:table/${self:provider.environment.BATCH_UPLOAD_TABLE}/index/*"
        - "arn:aws:dynamodb:${self:custom.config.region}:*:table/${self:provider.environment.EXPORT_REQUEST_TABLE}"
        - "arn:aws:dynamodb:${self:custom.config.region}:*:table/${self:provider.environment.EXPORT_REQUEST_TABLE}/index/*"
        - "arn:aws:lambda:${self:custom.config.region}:*:function:*"
        - "arn:aws:ses:${self:custom.config.region}:*"
        - "arn:aws:ses:${self:custom.config.region}:*:identity/*"
        - "arn:aws:secretsmanager:${self:custom.config.region}:*"
        - "arn:aws:s3:::${self:provider.environment.TEMPLATES_BUCKET}/*"
        - "arn:aws:s3:::${self:custom.s3Buckets.BUCKET_NAME}/*"
        - "arn:aws:s3:::${self:custom.s3Buckets.BUCKET_NAME}"
        - "arn:aws:s3:::${self:provider.environment.TEMPLATES_BUCKET}"
        - "arn:aws:logs:${self:custom.config.region}:*:log-group:*"
        - "arn:aws:logs:${self:custom.config.region}:*:log-group:*:*:*"

functions:
  start:
    handler: src/handlers/StartExports.run
    timeout: 120
          
  download:
    handler: src/handlers/CheckDownloads.run
    timeout: 120
    environment:
      FUNCTION_PREFIX: ${self:service}-${opt:stage, self:provider.stage}
      EXPORTS_BUCKET: ${self:custom.s3Buckets.BUCKET_NAME}

  copy:
    handler: src/handlers/CopyFile.run
    timeout: 900

  status:
    handler: src/handlers/CheckStatus.run
    timeout: 30
    events:
      - http:
          method: get
          path: status

  transform:
    handler: src/handlers/Transform.run
    timeout: 900
    environment:
      FUNCTION_PREFIX: ${self:service}-${opt:stage, self:provider.stage}
    events:
      - s3:
        bucket: ${self:custom.s3Buckets.BUCKET_NAME}
        event: s3:ObjectCreated:*
        existing: true
  
  report:
    handler: src/handlers/JobReport.run
    timeout: 120

  upload:
    handler: src/handlers/Upload.run
    timeout: 30
    environment:
      FUNCTION_PREFIX: ${self:service}-${opt:stage, self:provider.stage}
    events:
      - http:
          method: post
          path: upload

resources:
  Resources:
    DownloadsTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: downloadPath
            AttributeType: S
          - AttributeName: downloaded
            AttributeType: S
        KeySchema:
          - AttributeName: downloadPath
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: DownloadedIndex
            KeySchema:
              - AttributeName: downloaded
                KeyType: HASH
            Projection:
              ProjectionType: KEYS_ONLY
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DOWNLOADS_TABLE}
    BatchUploadTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: identifier
            AttributeType: S
          - AttributeName: status
            AttributeType: S
        KeySchema:
          - AttributeName: identifier
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: UploadedIndex
            KeySchema:
              - AttributeName: status
                KeyType: HASH
            Projection:
              ProjectionType: KEYS_ONLY
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.BATCH_UPLOAD_TABLE}
    ExportRequestTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: dateRequested
            AttributeType: S
          - AttributeName: status
            AttributeType: S
        KeySchema:
          - AttributeName: dateRequested
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ExportStatusIndex
            KeySchema:
              - AttributeName: status
                KeyType: HASH
            Projection:
              ProjectionType: KEYS_ONLY
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.EXPORT_REQUEST_TABLE}
    S3BucketExportTransforms:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: '${self:custom.s3Buckets.BUCKET_NAME}'
        LifecycleConfiguration: 
          Rules:
              - Id: DeleteEverythingInSevenDays
                Prefix: ''
                Status: Enabled
                ExpirationInDays: 7
    TransformLambdaPermissionS3:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName:
          'Fn::GetAtt':
            - TransformLambdaFunction
            - Arn
        Principal: 's3.amazonaws.com'
        Action: 'lambda:InvokeFunction'
        SourceAccount:
          Ref: AWS::AccountId
        SourceArn: 'arn:aws:s3:::${self:custom.s3Buckets.BUCKET_NAME}'